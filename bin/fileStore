#!/usr/bin/env node
const klaw = require('klaw')
const path = require('path');
const fse = require('fs-extra');

const cwd = process.cwd();

/**
 * return a file entity { abs, rel } from an absolute filename
 */
const get = module.exports.get = abs => {
  const rel = path.relative(cwd, abs);
  const file = { abs, rel };

  return Promise.resolve(file);
}

/**
 * return a collection of file entities { abs, rel } from absolute dirname
 */
module.exports.getAll = dirname => {
  const filenames = [];

  // @todo - clean that
  // filter function for klaw (__transpile)
  const klawFilter = (item) => {
    const basename = path.basename(item)
    return basename === '.' || basename[0] !== '.'
  }

  return new Promise((resolve, reject) => {
    klaw(dirname, { filter: klawFilter })
      .on('data', item => {
        if (item.stats.isFile()) {
          filenames.push(item.path);
        }
      })
      .on('error', err => reject(err))
      .on('end', () => {
        return Promise
          .all(filenames.map(get))
          .then(files => resolve(files));
      });
  });
}

/**
 * delete a file from file system
 */
module.exports.delete = function(file) {
  return new Promise((resolve, reject) => {
    fse.stat(file.abs, (err, stats) => {
      if (err) {
        if (err.code == 'ENOENT')
          return resolve(file); // ignore if  doesn't exists
        else
          return reject(err);
      }

      fse.remove(file.abs, err => {
        if (err)
          reject(err);
        else
          resolve(file);
      });
    });
  });
};
